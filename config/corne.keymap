/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include "keypos_42keys.h"

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

&sl {
    release-after-ms = <2000>;
};

&sk {
    release-after-ms = <2000>;
    quick-release;
};

/ {
        lm: lm {
            label = "LAYER_MOD";
            compatible = "zmk,behavior-macro";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <0>;
            bindings = <&macro_press &mo 3>,
                       <&macro_press &kp LGUI>,
                       <&macro_pause_for_release>,
                       <&macro_release &kp LGUI>,
                       <&macro_release &mo 3>;
        };

        behaviors {
            hml: hold_mod_left {
                compatible = "zmk,behavior-hold-tap";
                label = "HOLD_MOD_LEFT";
                #binding-cells = <2>;
                flavor = "balanced";
                tapping-term-ms = <280>;
                quick-tap-ms = <175>;                // repeat on tap-into-hold
                require-prior-idle-ms = <50>;
                bindings = <&kp>, <&kp>;
                hold-trigger-key-positions = <KEYS_R THUMBS>;
                hold-trigger-on-release;             // delay positional check until key-release
            };
        };

        behaviors {
            hmr: hold_mod_right {
                compatible = "zmk,behavior-hold-tap";
                label = "HOLD_MOD_RIGHT";
                #binding-cells = <2>;
                flavor = "balanced";
                tapping-term-ms = <280>;
                quick-tap-ms = <175>;                // repeat on tap-into-hold
                require-prior-idle-ms = <50>;
                bindings = <&kp>, <&kp>;
                hold-trigger-key-positions = <KEYS_L THUMBS>;
                hold-trigger-on-release;             // delay positional check until key-release
            };
        };

        behaviors {
            hlmr: hold_layer_mod_right {
                compatible = "zmk,behavior-hold-tap";
                label = "HOLD_LAYER_MOD_RIGHT";
                #binding-cells = <2>;
                flavor = "balanced";
                tapping-term-ms = <280>;
                quick-tap-ms = <175>;                // repeat on tap-into-hold
                require-prior-idle-ms = <50>;
                bindings = <&lm>, <&kp>;
                hold-trigger-key-positions = <KEYS_L THUMBS>;
                hold-trigger-on-release;             // delay positional check until key-release
            };
        };

        behaviors {
            td_shift: tap_dance_shift {
                compatible = "zmk,behavior-tap-dance";
                label = "TAP_DANCE_SHIFT";
                #binding-cells = <0>;
                tapping-term-ms = <200>;
                bindings = <&sk LSHFT>, <&caps_word>;
            };
        };

        behaviors {
            tdl: tap_dance_lower {
                compatible = "zmk,behavior-tap-dance";
                label = "TAP_DANCE_LOWER";
                #binding-cells = <0>;
                tapping-term-ms = <200>;
                bindings = <&sl 1>, <&tog 1>;
            };
        };

        behaviors {
            tdr: tap_dance_raise {
                compatible = "zmk,behavior-tap-dance";
                label = "TAP_DANCE_RAISE";
                #binding-cells = <0>;
                tapping-term-ms = <200>;
                bindings = <&sl 2>, <&tog 2>;
            };
        };

        behaviors {
            tdd: tap_dance_delete {
                compatible = "zmk,behavior-tap-dance";
                label = "TAP_DANCE_DELETE";
                #binding-cells = <0>;
                tapping-term-ms = <200>;
                bindings = <&kp BSLH>, <&kp DEL>;
            };
        };

        keymap {
                compatible = "zmk,keymap";
default_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
// | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
// | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
//                    | GUI | LWR | ENT |   | SPC | RSE  | ALT |
                        bindings = <
   &kp TAB   &kp Q &kp W &kp E &kp R &kp T   &kp Y &kp U  &kp I     &kp O   &kp P    &tdd
   &kp LCTRL &hml LSHFT A &hml LGUI S &hml LALT D &hml LCTRL F &kp G   &kp H &hmr LCTRL J  &hmr LALT K &hlmr 0 L  &hmr RSHFT SEMI &kp SQT
//   &kp LCTRL &hml LSHFT A &hml LGUI S &hml LALT D &hml LCTRL F &kp G   &kp H &hmr LCTRL J  &hmr LALT K &hmr LGUI L   &hmr RSHFT SEMI &kp SQT
   &td_shift &kp Z &kp X &kp C &kp V &kp B   &kp N &kp M  &kp COMMA &kp DOT &kp FSLH &kp RALT
                    &tdr &kp ESC &kp RET   &kp SPACE &kp BSPC &tdl
                        >;
                };
                lower_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
// | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
// | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
//                    | GUI |     | SPC |   | ENT |     | ALT |
                        bindings = <
   &kp TILDE  &kp N1      &kp N2     &kp N3       &kp N4       &kp N5         &kp N6   &kp N7   &kp N8 &kp N9    &kp N0 &trans
   &trans     &trans      &kp UP     &trans       &trans       &trans         &trans   &trans   &trans &trans    &trans &trans
   &kp LSHFT  &kp LEFT    &kp DOWN   &kp RIGHT    &trans       &trans         &trans   &trans   &trans &trans    &trans &trans

                                    &trans     &trans       &trans      &trans  &trans   &trans
                        >;
                };

                raise_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
// | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
// | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
//                    | GUI |     | SPC |   | ENT |     | ALT |
                        bindings = <
   &kp GRAVE  &kp EXCL &kp AT &kp HASH &kp DLLR &kp PRCNT   &kp CARET &kp AMPS  &kp KP_MULTIPLY &kp LPAR &kp RPAR &trans
   &kp LCTRL &trans   &trans &trans   &trans   &trans      &kp MINUS &kp EQUAL &kp LBKT        &kp RBKT &kp BSLH &kp GRAVE
   &kp LSHFT &trans   &trans &trans   &trans   &trans      &kp UNDER &kp PLUS  &kp LBRC        &kp RBRC &kp PIPE &kp TILDE
                             &trans &trans   &trans   &trans   &trans    &trans
                        >;
                };
                gui_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
// | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
// | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
//                    | GUI | LWR | ENT |   | SPC | RSE  | ALT |
                        bindings = <
   &kp TAB    &kp N1       &kp N2       &kp N3       &kp N4       &kp N5         &kp N6   &kp N7   &kp N8 &kp N9    &kp N0 &trans
   &trans   &kp Q &kp W &kp E &kp R &kp T   &kp Y &kp U  &kp I     &kp O   &kp P    &trans
   &kp LCTRL &kp A &kp S &kp D &kp F &kp G   &kp H &kp J  &kp K &kp L  &kp SEMI &kp SQT
                    &tdr &kp ESC &kp RET   &kp SPACE &kp BSPC &tdl
                        >;
                };
        };
};
